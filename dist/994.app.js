"use strict";(self.webpackChunkbabylonjs=self.webpackChunkbabylonjs||[]).push([[994,6464],{994:(e,t,r)=>{r.r(t),r.d(t,{_DDSTextureLoader:()=>n});var a=r(7517),o=r(6464);class n{constructor(){this.supportCascades=!0}loadCubeData(e,t,r,n){const s=t.getEngine();let l,f=!1,i=1e3;if(Array.isArray(e))for(let r=0;r<e.length;r++){const a=e[r];l=o.DDSTools.GetDDSInfo(a),t.width=l.width,t.height=l.height,f=(l.isRGB||l.isLuminance||l.mipmapCount>1)&&t.generateMipMaps,s._unpackFlipY(l.isCompressed),o.DDSTools.UploadDDSLevels(s,t,a,l,f,6,-1,r),l.isFourCC||1!==l.mipmapCount?i=l.mipmapCount-1:s.generateMipMapsForCubemap(t)}else{const n=e;l=o.DDSTools.GetDDSInfo(n),t.width=l.width,t.height=l.height,r&&(l.sphericalPolynomial=new a.Q),f=(l.isRGB||l.isLuminance||l.mipmapCount>1)&&t.generateMipMaps,s._unpackFlipY(l.isCompressed),o.DDSTools.UploadDDSLevels(s,t,n,l,f,6),l.isFourCC||1!==l.mipmapCount?i=l.mipmapCount-1:s.generateMipMapsForCubemap(t,!1)}s._setCubeMapTextureParams(t,f,i),t.isReady=!0,t.onLoadedObservable.notifyObservers(t),t.onLoadedObservable.clear(),n&&n({isDDS:!0,width:t.width,info:l,data:e,texture:t})}loadData(e,t,r){const a=o.DDSTools.GetDDSInfo(e),n=(a.isRGB||a.isLuminance||a.mipmapCount>1)&&t.generateMipMaps&&Math.max(a.width,a.height)>>a.mipmapCount-1==1;r(a.width,a.height,n,a.isFourCC,(()=>{o.DDSTools.UploadDDSLevels(t.getEngine(),t,e,a,n,1)}))}}},6464:(e,t,r)=>{r.d(t,{DDSTools:()=>y});var a=r(4867),o=r(1137),n=r(6755),s=r(7890);r(8258);const l=131072,f=131072;function i(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const u=i("DXT1"),c=i("DXT3"),p=i("DXT5"),A=i("DX10");class y{static GetDDSInfo(e){const t=new Int32Array(e.buffer,e.byteOffset,31),r=new Int32Array(e.buffer,e.byteOffset,35);let a=1;t[2]&l&&(a=Math.max(1,t[7]));const o=t[21],n=o===A?r[32]:0;let s=0;switch(o){case 113:s=2;break;case 116:s=1;break;case A:if(10===n){s=2;break}if(2===n){s=1;break}}return{width:t[4],height:t[3],mipmapCount:a,isFourCC:!(4&~t[20]),isRGB:!(64&~t[20]),isLuminance:(t[20]&f)===f,isCube:!(512&~t[28]),isCompressed:o===u||o===c||o===p,dxgiFormat:n,textureType:s}}static _GetHalfFloatAsFloatRGBAArrayBuffer(e,t,r,a,o,n){const l=new Float32Array(a),f=new Uint16Array(o,r);let i=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const a=4*(t+r*e);l[i]=(0,s.SX)(f[a]),l[i+1]=(0,s.SX)(f[a+1]),l[i+2]=(0,s.SX)(f[a+2]),y.StoreLODInAlphaChannel?l[i+3]=n:l[i+3]=(0,s.SX)(f[a+3]),i+=4}return l}static _GetHalfFloatRGBAArrayBuffer(e,t,r,a,o,n){if(y.StoreLODInAlphaChannel){const l=new Uint16Array(a),f=new Uint16Array(o,r);let i=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const a=4*(t+r*e);l[i]=f[a],l[i+1]=f[a+1],l[i+2]=f[a+2],l[i+3]=(0,s.LZ)(n),i+=4}return l}return new Uint16Array(o,r,a)}static _GetFloatRGBAArrayBuffer(e,t,r,a,o,n){if(y.StoreLODInAlphaChannel){const s=new Float32Array(a),l=new Float32Array(o,r);let f=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const a=4*(t+r*e);s[f]=l[a],s[f+1]=l[a+1],s[f+2]=l[a+2],s[f+3]=n,f+=4}return s}return new Float32Array(o,r,a)}static _GetFloatAsHalfFloatRGBAArrayBuffer(e,t,r,a,o,n){const l=new Uint16Array(a),f=new Float32Array(o,r);let i=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++)l[i]=(0,s.LZ)(f[i]),l[i+1]=(0,s.LZ)(f[i+1]),l[i+2]=(0,s.LZ)(f[i+2]),y.StoreLODInAlphaChannel?l[i+3]=(0,s.LZ)(n):l[i+3]=(0,s.LZ)(f[i+3]),i+=4;return l}static _GetFloatAsUIntRGBAArrayBuffer(e,t,r,o,n,s){const l=new Uint8Array(o),f=new Float32Array(n,r);let i=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const o=4*(t+r*e);l[i]=255*(0,a.Clamp)(f[o]),l[i+1]=255*(0,a.Clamp)(f[o+1]),l[i+2]=255*(0,a.Clamp)(f[o+2]),y.StoreLODInAlphaChannel?l[i+3]=s:l[i+3]=255*(0,a.Clamp)(f[o+3]),i+=4}return l}static _GetHalfFloatAsUIntRGBAArrayBuffer(e,t,r,o,n,l){const f=new Uint8Array(o),i=new Uint16Array(n,r);let u=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const o=4*(t+r*e);f[u]=255*(0,a.Clamp)((0,s.SX)(i[o])),f[u+1]=255*(0,a.Clamp)((0,s.SX)(i[o+1])),f[u+2]=255*(0,a.Clamp)((0,s.SX)(i[o+2])),y.StoreLODInAlphaChannel?f[u+3]=l:f[u+3]=255*(0,a.Clamp)((0,s.SX)(i[o+3])),u+=4}return f}static _GetRGBAArrayBuffer(e,t,r,a,o,n,s,l,f){const i=new Uint8Array(a),u=new Uint8Array(o,r);let c=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const a=4*(t+r*e);i[c]=u[a+n],i[c+1]=u[a+s],i[c+2]=u[a+l],i[c+3]=u[a+f],c+=4}return i}static _ExtractLongWordOrder(e){return 0===e||255===e||-16777216===e?0:1+y._ExtractLongWordOrder(e>>8)}static _GetRGBArrayBuffer(e,t,r,a,o,n,s,l){const f=new Uint8Array(a),i=new Uint8Array(o,r);let u=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const a=3*(t+r*e);f[u]=i[a+n],f[u+1]=i[a+s],f[u+2]=i[a+l],u+=3}return f}static _GetLuminanceArrayBuffer(e,t,r,a,o){const n=new Uint8Array(a),s=new Uint8Array(o,r);let l=0;for(let r=0;r<t;r++)for(let t=0;t<e;t++){const a=t+r*e;n[l]=s[a],l++}return n}static UploadDDSLevels(e,t,r,a,s,f,i=-1,d,m=!0){let h=null;a.sphericalPolynomial&&(h=[]);const C=!!e.getCaps().s3tc;t.generateMipMaps=s;const b=new Int32Array(r.buffer,r.byteOffset,31);let G,B,D,F,_,w,S,g=0,L=0,R=1;if(542327876!==b[0])return void o.V.Error("Invalid magic number in DDS header");if(!a.isFourCC&&!a.isRGB&&!a.isLuminance)return void o.V.Error("Unsupported format, must contain a FourCC, RGB or LUMINANCE code");if(a.isCompressed&&!C)return void o.V.Error("Compressed textures are not supported on this platform.");let x=b[22];F=b[1]+4;let O=!1;if(a.isFourCC)switch(G=b[21],G){case u:R=8,L=33777;break;case c:R=16,L=33778;break;case p:R=16,L=33779;break;case 113:O=!0,x=64;break;case 116:O=!0,x=128;break;case A:{F+=20;let e=!1;switch(a.dxgiFormat){case 10:O=!0,x=64,e=!0;break;case 2:O=!0,x=128,e=!0;break;case 88:a.isRGB=!0,a.isFourCC=!1,x=32,e=!0}if(e)break}default:return void o.V.Error(["Unsupported FourCC code:",(U=G,String.fromCharCode(255&U,U>>8&255,U>>16&255,U>>24&255))])}var U;const k=y._ExtractLongWordOrder(b[23]),T=y._ExtractLongWordOrder(b[24]),I=y._ExtractLongWordOrder(b[25]),M=y._ExtractLongWordOrder(b[26]);O&&(L=e._getRGBABufferInternalSizedFormat(a.textureType)),w=1,b[2]&l&&!1!==s&&(w=Math.max(1,b[7]));const v=d||0,H=e.getCaps();for(let o=v;o<f;o++){for(B=b[4],D=b[3],S=0;S<w;++S){if(-1===i||i===S){const n=-1===i?S:0;if(!a.isCompressed&&a.isFourCC){t.format=5,g=B*D*4;let a=null;if(e._badOS||e._badDesktopOS||!H.textureHalfFloat&&!H.textureFloat)128===x?(a=y._GetFloatAsUIntRGBAArrayBuffer(B,D,r.byteOffset+F,g,r.buffer,n),h&&0==n&&h.push(y._GetFloatRGBAArrayBuffer(B,D,r.byteOffset+F,g,r.buffer,n))):64===x&&(a=y._GetHalfFloatAsUIntRGBAArrayBuffer(B,D,r.byteOffset+F,g,r.buffer,n),h&&0==n&&h.push(y._GetHalfFloatAsFloatRGBAArrayBuffer(B,D,r.byteOffset+F,g,r.buffer,n))),t.type=0;else{const e=H.textureFloat&&(m&&H.textureFloatLinearFiltering||!m),o=H.textureHalfFloat&&(m&&H.textureHalfFloatLinearFiltering||!m),s=(128===x||64===x&&!o)&&e?1:(64===x||128===x&&!e)&&o?2:0;let l,f=null;if(128===x)switch(s){case 1:l=y._GetFloatRGBAArrayBuffer,f=null;break;case 2:l=y._GetFloatAsHalfFloatRGBAArrayBuffer,f=y._GetFloatRGBAArrayBuffer;break;case 0:l=y._GetFloatAsUIntRGBAArrayBuffer,f=y._GetFloatRGBAArrayBuffer}else switch(s){case 1:l=y._GetHalfFloatAsFloatRGBAArrayBuffer,f=null;break;case 2:l=y._GetHalfFloatRGBAArrayBuffer,f=y._GetHalfFloatAsFloatRGBAArrayBuffer;break;case 0:l=y._GetHalfFloatAsUIntRGBAArrayBuffer,f=y._GetHalfFloatAsFloatRGBAArrayBuffer}t.type=s,a=l(B,D,r.byteOffset+F,g,r.buffer,n),h&&0==n&&h.push(f?f(B,D,r.byteOffset+F,g,r.buffer,n):a)}a&&e._uploadDataToTextureDirectly(t,a,o,n)}else if(a.isRGB)t.type=0,24===x?(t.format=4,g=B*D*3,_=y._GetRGBArrayBuffer(B,D,r.byteOffset+F,g,r.buffer,k,T,I),e._uploadDataToTextureDirectly(t,_,o,n)):(t.format=5,g=B*D*4,_=y._GetRGBAArrayBuffer(B,D,r.byteOffset+F,g,r.buffer,k,T,I,M),e._uploadDataToTextureDirectly(t,_,o,n));else if(a.isLuminance){const a=e._getUnpackAlignement(),s=B;g=Math.floor((B+a-1)/a)*a*(D-1)+s,_=y._GetLuminanceArrayBuffer(B,D,r.byteOffset+F,g,r.buffer),t.format=1,t.type=0,e._uploadDataToTextureDirectly(t,_,o,n)}else g=Math.max(4,B)/4*Math.max(4,D)/4*R,_=new Uint8Array(r.buffer,r.byteOffset+F,g),t.type=0,e._uploadCompressedDataToTextureDirectly(t,L,B,D,_,o,n)}F+=x?B*D*(x/8):g,B*=.5,D*=.5,B=Math.max(1,B),D=Math.max(1,D)}if(void 0!==d)break}h&&h.length>0?a.sphericalPolynomial=n.d.ConvertCubeMapToSphericalPolynomial({size:b[4],right:h[0],left:h[1],up:h[2],down:h[3],front:h[4],back:h[5],format:5,type:1,gammaSpace:!1}):a.sphericalPolynomial=void 0}}y.StoreLODInAlphaChannel=!1}}]);