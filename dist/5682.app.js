"use strict";(self.webpackChunkbabylonjs=self.webpackChunkbabylonjs||[]).push([[5682],{5682:(a,e,t)=>{t.r(e),t.d(e,{FlowGraphSetVariableBlock:()=>l});var r=t(6552),i=t(3006),s=t(4720);class l extends i.w{constructor(a){if(super(a),!a.variable&&!a.variables)throw new Error("FlowGraphSetVariableBlock: variable/variables is not defined");if(a.variables&&a.variable)throw new Error("FlowGraphSetVariableBlock: variable and variables are both defined");if(a.variables)for(const e of a.variables)this.registerDataInput(e,s.Vv);else this.registerDataInput("value",s.Vv)}_execute(a,e){if(this.config?.variables)for(const e of this.config.variables)this._saveVariable(a,e);else this._saveVariable(a,this.config?.variable,"value");this.out._activateSignal(a)}_saveVariable(a,e,t){const r=a._getGlobalContextVariable("currentlyRunningAnimationGroups",[]);for(const t of r){const i=a.assetsContext.animationGroups[t];for(const s of i.targetedAnimations)if(s.target===a&&s.target===a&&s.animation.targetProperty===e){i.stop();const e=r.indexOf(t);e>-1&&r.splice(e,1),a._setGlobalContextVariable("currentlyRunningAnimationGroups",r);break}}const i=this.getDataInput(t||e)?.getValue(a);a.setVariable(e,i)}getClassName(){return"FlowGraphSetVariableBlock"}serialize(a){super.serialize(a),a.config.variable=this.config?.variable}}(0,r.Y5)("FlowGraphSetVariableBlock",l)}}]);