"use strict";(self.webpackChunkbabylonjs=self.webpackChunkbabylonjs||[]).push([[3314],{3314:(e,t,s)=>{s.r(t),s.d(t,{FlowGraphReceiveCustomEventBlock:()=>a});var n=s(2086),o=s(998),r=s(6552),i=s(2031);class a extends n.i{constructor(e){super(e),this.config=e,this.initPriority=1;for(const e in this.config.eventData)this.registerDataOutput(e,this.config.eventData[e].type)}_preparePendingTasks(e){const t=e.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(t&&t.hasObservers()&&t.observers.length>i.x.MaxEventsPerType)return void this._reportError(e,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${i.x.MaxEventsPerType}.`);const s=t.add((t=>{const s=Object.keys(t);for(const n of s)this.getDataOutput(n)?.setValue(t[n],e);this._execute(e)}));e._setExecutionVariable(this,"_eventObserver",s)}_cancelPendingTasks(e){const t=e.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(t){const s=e._getExecutionVariable(this,"_eventObserver",null);t.remove(s)}else o.S0.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(e,t){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}}(0,r.Y5)("FlowGraphReceiveCustomEventBlock",a)}}]);