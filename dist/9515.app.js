"use strict";(self.webpackChunkbabylonjs=self.webpackChunkbabylonjs||[]).push([[9515],{9515:(e,t,s)=>{s.r(t),s.d(t,{FlowGraphForLoopBlock:()=>l});var i=s(3006),n=s(4720),a=s(6552),o=s(4686),r=s(868);class l extends i.w{constructor(e){super(e),this.startIndex=this.registerDataInput("startIndex",n.Vv,0),this.endIndex=this.registerDataInput("endIndex",n.Vv),this.step=this.registerDataInput("step",n.Es,1),this.index=this.registerDataOutput("index",n.x2,new r.P((0,o.$w)(e?.initialIndex??0))),this.executionFlow=this._registerSignalOutput("executionFlow"),this.completed=this._registerSignalOutput("completed"),this._unregisterSignalOutput("out")}_execute(e){const t=(0,o.$w)(this.startIndex.getValue(e)),s=this.step.getValue(e);let i=(0,o.$w)(this.endIndex.getValue(e));for(let n=t;n<i&&(this.index.setValue(new r.P(n),e),this.executionFlow._activateSignal(e),i=(0,o.$w)(this.endIndex.getValue(e)),!(n>l.MaxLoopIterations*s));n+=s);this.config?.incrementIndexWhenLoopDone&&this.index.setValue(new r.P((0,o.$w)(this.index.getValue(e))+s),e),this.completed._activateSignal(e)}getClassName(){return"FlowGraphForLoopBlock"}}l.MaxLoopIterations=1e3,(0,a.Y5)("FlowGraphForLoopBlock",l)}}]);