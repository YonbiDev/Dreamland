"use strict";(self.webpackChunkbabylonjs=self.webpackChunkbabylonjs||[]).push([[9720],{9720:(t,s,e)=>{e.r(s),e.d(s,{FlowGraphSwitchBlock:()=>o});var i=e(3138),a=e(4720),c=e(6552),u=e(4686);class o extends i.u{constructor(t){super(t),this.config=t,this.default=this._registerSignalOutput("default"),this._caseToOutputFlow=new Map,this.case=this.registerDataInput("case",a.Vv);const s=this.config.cases||[];for(const t of s)this._caseToOutputFlow.set(t,this._registerSignalOutput(`out_${t}`))}_execute(t,s){const e=this.case.getValue(t);let i;i=(0,u.kf)(e)?this._getOutputFlowForCase((0,u.$w)(e)):this._getOutputFlowForCase(e),i?i._activateSignal(t):this.default._activateSignal(t)}addCase(t){this.config.cases.includes(t)||(this.config.cases.push(t),this._caseToOutputFlow.set(t,this._registerSignalOutput(`out_${t}`)))}removeCase(t){if(!this.config.cases.includes(t))return;const s=this.config.cases.indexOf(t);this.config.cases.splice(s,1),this._caseToOutputFlow.delete(t)}_getOutputFlowForCase(t){return this._caseToOutputFlow.get(t)}getClassName(){return"FlowGraphSwitchBlock"}serialize(t){super.serialize(t),t.cases=this.config.cases}}(0,c.Y5)("FlowGraphSwitchBlock",o)}}]);